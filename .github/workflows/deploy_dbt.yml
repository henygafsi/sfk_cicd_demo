---
image: docker:latest

variables:
  DBT_FOLDER: dbt_project_demo
  DBT_PROFILE: demo

  LINUX_TARGET_DIR: /usr/local/$CI_PROJECT_NAME/$CI_ENVIRONMENT_NAME
  WINDOWS_TARGET_DIR: C:\Exploitation\$CI_PROJECT_NAME\$CI_ENVIRONMENT_NAME

  DBT_VERSION:
    value: "21"
    description: "Which major version of dbt should be used (18/19/20)"

  DBT_EXT_SOURCE:
    value: "demo"
    description: "Which external source should be refreshed. Leave empty to refresh all"

  DBT_EXT_FULL_REFRESH:
    value: "true"
    description: "Should a full refresh be done for the specified source (true/false)"

  DBT_SNAPSHOT:
    value: "false"
    description: "Should dbt snapshots be run (true/false)"

stages:
  - build_dbt_demo
  - release
  - deploy_rct_dbt_demo
  - deploy_prd_dbt_demo

# Templates for execution conditions
.run-if-develop:
  only:
    refs:
      - develop

.run-if-master:
  only:
    refs:
      - master

.run-if-tags:
  only:
    refs:
      - tags

# Templates for execution targets
# Run on dbt non production VM
.run-on-dbt-tst:
  tags: [dbt,tst,fr]
# Run on dbt production VM
.run-on-dbt-prd:
  tags: [dbt,prd,fr]



# Template script to check and compile dbt projetc
.dbt-build:
  variables:
    DBT_FOLDER: "DBT projet root folder"
    DBT_PROFILE: "DBT profile name"

  script:
    - source ~/dbt-env-$DBT_VERSION/bin/activate
    - cd $DBT_FOLDER
    - dbt debug --profiles-dir . --profile $DBT_PROFILE --target $CI_ENVIRONMENT_NAME
    - dbt compile --profiles-dir . --profile $DBT_PROFILE --target $CI_ENVIRONMENT_NAME

# Create folders, copy sources deleting missing files only within folders managed by git
# DBT_FOLDER: "DBT projet root folder"
.dbt-prepare:
  before_script:
    - sudo mkdir -p $LINUX_TARGET_DIR/$DBT_FOLDER
    - sudo rsync -r --delete ./$DBT_FOLDER $LINUX_TARGET_DIR/ --exclude-from ./$DBT_FOLDER/.gitignore
    - sudo chown -R gitlab-runner:gitlab-runner $LINUX_TARGET_DIR/$DBT_FOLDER/
    - sudo chmod -R u+rwX  $LINUX_TARGET_DIR/$DBT_FOLDER/
    - source /home/gitlab-runner/dbt-env-$DBT_VERSION/bin/activate
    - cd $LINUX_TARGET_DIR/$DBT_FOLDER
    - dbt compile --profiles-dir . --profile $DBT_PROFILE --target $CI_ENVIRONMENT_NAME



# Template for loading dbt seed files
.dbt-seed:
  script:
    - cd $LINUX_TARGET_DIR/$DBT_FOLDER
    - dbt --partial-parse seed --profiles-dir . --profile $DBT_PROFILE --target $CI_ENVIRONMENT_NAME

# Template for full refreshing an external source (external table or snowpipe)
.dbt-external-refresh:
  script:
    - cd $LINUX_TARGET_DIR/$DBT_FOLDER
    - 'dbt --partial-parse run-operation stage_external_sources --profiles-dir . --profile $DBT_PROFILE --target $CI_ENVIRONMENT_NAME --vars "ext_full_refresh: $DBT_EXT_FULL_REFRESH" --args "select: $DBT_EXT_SOURCE"'

# Template for running dbt snapshots
# DBT_FOLDER: "DBT projet root folder"
# DBT_PROFILE: "DBT profile name"
.dbt-snapshot:
  script:
    - cd $LINUX_TARGET_DIR/$DBT_FOLDER
    - dbt --partial-parse snapshot --profiles-dir . --profile $DBT_PROFILE --target $CI_ENVIRONMENT_NAME

# Template for running general operations needed for delivery
.dbt-run-operation:
  script:
    # Run
    - cd $LINUX_TARGET_DIR/$DBT_FOLDER
    #- dbt run-operation <macro_name> --profiles-dir . --profile raw --target $CI_ENVIRONMENT_NAME

# Template for running dbt projet and tests (including seeds and external sources)
.dbt-run:
  script:
    # Run
    - cd $LINUX_TARGET_DIR/$DBT_FOLDER
    #- chmod +x detect-model-changes.sh
    - 'dbt --partial-parse run-operation stage_external_sources --profiles-dir . --profile $DBT_PROFILE --target $CI_ENVIRONMENT_NAME --vars "ext_full_refresh: $DBT_EXT_FULL_REFRESH" --args "select: $DBT_EXT_SOURCE"'
    - dbt --partial-parse build  --profiles-dir . --profile $DBT_PROFILE --target $CI_ENVIRONMENT_NAME --exclude tag:$DBT_EXCLUDE


# Compile dbt code for project demo database
Build demo:
  stage: build_dbt_demo
  extends:
    - .dbt-build
    - .run-on-dbt-tst
    - .run-if-develop
  variables:
    DBT_FOLDER: dbt_project_demo
    DBT_PROFILE: demo
  only:
    changes:
      - dbt_project_demo/**/*
  allow_failure: false
  environment: rct


# Generate page website
pages:
  stage: release
  extends:
    - .run-on-dbt-tst
    - .run-if-master
  variables:
    DBT_FOLDER: "dbt_project_demo"
    DBT_PROFILE: "demo"
  script:
  # Create Atifact public directory
  - mkdir -p public
  # Generate dbt documentation
  - source ~/dbt-env-$DBT_VERSION/bin/activate
  - cd $DBT_FOLDER
  - dbt docs generate --profiles-dir . --profile $DBT_PROFILE --target $CI_ENVIRONMENT_NAME
  # Get generated files and copy then to public (needed for pages)
  - cp ./target/*.json ../public/
  - cp ./target/*.html ../public/
  artifacts:
    paths:
    - public
  only:
    changes:
      - dbt_project_demo/**/*
  environment: rct


# Deploy dbt scripts project demo to rct machine and run
Deployment user acceptance dbt demo:
  stage: deploy_rct_dbt_demo
  extends:
    - .dbt-prepare
    - .dbt-run
    - .run-on-dbt-tst
    - .run-if-develop
  variables:
    DBT_FOLDER: dbt_project_demo
    DBT_PROFILE: demo
  allow_failure: false
  environment: rct


Deployment production dbt demo:
  stage: deploy_prd_dbt_demo
  extends:
    - .dbt-prepare
    - .dbt-run
    - .run-on-dbt-prd
    - .run-if-master
  variables:
    DBT_FOLDER: dbt_project_demo
    DBT_PROFILE: demo
  allow_failure: false
  when: manual
  environment: prd
  dependencies:
    - Deployment user acceptance dbt demo
